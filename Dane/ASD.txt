11 5
2 5 2 6
4 1 4 4
4 10 10 10
1 6 5 9
3 8 7 9

10 4
1 1 3 3
5 3 3 5
2 6 4 8
6 8 8 10

#include <iostream>
#include <fstream>
#include <algorithm>
using namespace std;

int licz = 0;

int silnia(int n)
{
    int result = 1;
    if (n==0 || n==1)
    {
        return 1;
    }
    else
    {
        for(int i=2;i<=n;i++)
        {
            result*=i;
            licz +=1;
        }
        return result;
    }
}


int SN2(int n, int k)
{
    if (k>n/2) k = n-k;
    int licznik = n-k+1;
    for(int i=n-k+2;i<=n;i++)
    {
        licz++;
        licznik*=i;
    }
    return licznik/silnia(k);
}

int SN5(int n, int k)
{
    int tab[n+1][k+1];
    for(int i=0;i<=n;i++) {
        for (int j = 0; j <= k; j++) {
            if (j == 0) tab[i][j] = 1;
            else tab[i][j] = 0;
        }
    }
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=k && j<=i;j++)
        {
            tab[i][j] = tab[i-1][j-1] + tab[i-1][j];
            licz++;
        }
    }

    return tab[n][k];
}

int main()
{
    ifstream file("In0101.txt");
    ofstream output("Out0101.txt");
    int n,k;
    file>>n>>k;
    output << "n: " << n << " k: "<< k << endl;
    file.close();
    output << "SN2: "<< SN2(n,k) << " " << licz << endl;
    licz = 0;
    output << "SN5: "<< SN5(n,k) << " " << licz << endl;
    output.close();

}


#include <iostream>
#include <fstream>
using namespace std;

void sortowaniePar(int Tab[], int n) {
    for (int i = 0; i < n; i += 2) {
        for (int j = i + 2; j < n; j += 2) {
            if (Tab[i] > Tab[j]) {
                int temp1 = Tab[i];
                Tab[i] = Tab[j];
                Tab[j] = temp1;

                int temp2 = Tab[i + 1];
                Tab[i + 1] = Tab[j + 1];
                Tab[j + 1] = temp2;
            }
        }
    }
}

int main() {
    ifstream plik("0104.txt");
    int r,szerokosc_korytarza;
    plik>>szerokosc_korytarza>>r;
    int a = szerokosc_korytarza;
    int rozmiar = r*4+2;
    int *tab = new int[rozmiar];
    int i=0;
    while(plik>>tab[i])
    {
        i++;
    }
//    cout << "tablica: "<<endl;
//    for (int i=0;i<rozmiar;i++)
//    {
//        cout << tab[i] << " ";
//    }
//    cout << endl;
    int tablica_y[r*2];
    int licznik = 0;
    int ilosc_wspolrzednych = r*2;
    cout << "Tablica y: ";
    for (int i = 1; i < rozmiar; i += 2) {
        tablica_y[licznik] = tab[i];
        cout << tablica_y[licznik] << " ";
        licznik++;
    }
    sortowaniePar(tablica_y, ilosc_wspolrzednych);

    cout << endl << "Posortowana tablica: ";
    for (int i = 0; i < ilosc_wspolrzednych; i++) {
        cout << tablica_y[i] << " ";
    }
    //algorytm

    int iloscPasm = 0;
    int poprzedniaPozycja = 0;
    const int maxLiczbaPasm = szerokosc_korytarza * 2;
    int *bezpiecznePasma = new int[maxLiczbaPasm];
    for (int i = 0; i < ilosc_wspolrzednych; i += 2) {
        int y1 = tablica_y[i];
        int y2 = tablica_y[i + 1];

        if (y1 > poprzedniaPozycja) {
            bezpiecznePasma[iloscPasm] = poprzedniaPozycja;
            iloscPasm++;
            bezpiecznePasma[iloscPasm] = y1;
            iloscPasm++;
        }

        poprzedniaPozycja = y2;
    }
    if (poprzedniaPozycja < szerokosc_korytarza) {
        bezpiecznePasma[iloscPasm] = poprzedniaPozycja;
        iloscPasm++;
        bezpiecznePasma[iloscPasm] = szerokosc_korytarza;
        iloscPasm++;
    }
    // wyniki
    cout << endl;
    for (int i = 0; i < iloscPasm; i += 2) {
        cout << "(" << bezpiecznePasma[i] << ", " << bezpiecznePasma[i + 1] << ")\n";
    }

    cout << iloscPasm / 2;

    delete []tab;
    delete []bezpiecznePasma;
}



















